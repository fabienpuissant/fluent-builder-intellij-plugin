<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
  <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
  <id>com.fluent.builder.fluent-builder</id>

  <version>1.0.2</version>

  <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
  <name>Fluent Builder</name>

  <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
  <vendor email="fabienpuissant9@gmail.com">Fabien Puissant</vendor>

  <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
  <description
  ><![CDATA[
    <body>
    <p>The <strong>IntelliJ Fluent Builder Plugin</strong> is your go-to solution for generating and managing fluent builders in Java projects.</p>

    <h4>Key Features:</h4>
    <ol>
        <li><strong>Effortless Fluent Builder Creation</strong><br>
            Quickly generate fluent builders for your classes with minimal effort, following a clean and intuitive design.</li>
        <li><strong>Highly Adaptable Builders</strong><br>
            Customize your builder to fit your exact needs:
            <ul>
                <li>Modify parameter types or names.</li>
                <li>Remove parameters to simplify your builder.</li>
                <li>Make parameters optional to suit different use cases.</li>
                <li>Reorder parameters for better readability and usability.</li>
            </ul>
            The plugin automatically adjusts the builder interfaces and methods to reflect your changes, ensuring a consistent and reliable builder.</li>
        <li><strong>Seamless Compatibility with Existing Code</strong><br>
            The plugin adheres to established naming conventions to ensure compatibility with your existing project:
            <ul>
                <li><strong>Builder Class Names</strong>: <code>ClassNameBuilder</code></li>
                <li><strong>Builder Interface Names</strong>: <code>ClassNameParamBuilder</code></li>
            </ul>
            This ensures that your generated builders integrate seamlessly into your current workflow.</li>
    </ol>

    <p><em>Need help or have suggestions? Feel free to reach out.</em></p>
    </body>
  ]]></description>

  <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
  <depends>com.intellij.modules.platform</depends>
  <depends>com.intellij.modules.java</depends>

  <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
  <extensions defaultExtensionNs="com.intellij">
    <applicationService
      serviceInterface="io.fabienpuissant.fluent.builder.infrastructure.secondary.PsiClassService"
      serviceImplementation="io.fabienpuissant.fluent.builder.infrastructure.secondary.PsiClassServiceImpl"
    />
  </extensions>

  <depends>com.intellij.java</depends>

  <actions>
    <action
      id="FluentBuilderAction"
      class="io.fabienpuissant.fluent.builder.infrastructure.primary.FluentBuilderAction"
      text="Fluent Builder"
      description="Generate a Fluent Builder"
    >
      <add-to-group group-id="GenerateGroup" anchor="last" />
      <keyboard-shortcut keymap="$default" first-keystroke="alt shift B" />
    </action>
  </actions>
</idea-plugin>
